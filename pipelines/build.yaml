trigger:
- master

variables:
  buildConfiguration: 'Release'
  skipComponentGovernanceDetection: true
  pool: 'ubuntu-latest'
  artifact: 'mybeercellar-api'
  location: 'eastus'
  resourceGroup: 'mybeercellar'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildInfrastructure
    displayName: Build Infrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      displayName: 'Install Bicep tooling'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/infrastructure/install.sh'

    - task: Bash@3
      displayName: 'Build ARM template from Bicep'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/'
        filePath: '$(System.DefaultWorkingDirectory)/infrastructure/build.sh'
    - task: CopyFiles@2
      displayName: 'Copy ARM templates to archive directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/infrastructure'
        Contents: '**/*.json'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/infrastructure/'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish infrastructure artifact'
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/infrastructure/
        ArtifactName: 'Infrastructure'
  
  - job: BuildCode
    displayName: 'Build API Code'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '-- configuration Release'
      
    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: publish
        publishWebProjects: true
        zipAfterPublish: true
        projects: '**/*.csproj'
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/code/'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish code artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/code/'
        ArtifactName: 'Code'

# - stage: Release
#   displayName: 'Release stage'
#   jobs:
#     - job:
#       displayName: 'Release Infrastructure'
#       steps:
#       - task: DownloadPipelineArtifact@2
#         displayName: 'Download artifact'
#         inputs:
#           buildType: 'current'
#           artifactName: $(artifact)
#           targetPath: $(System.DefaultWorkingDirectory)
      
#       # Why does the artifact appear to contain the entire source tree?
#       - task: AzureResourceManagerTemplateDeployment@3
#         displayName: 'Deploy ARM template'
#         inputs:
#           deploymentScope: 'Resource Group'
#           resourceGroupName: $(resourceGroup)
#           'location': $(location)
#           azureResourceManagerConnection: 'AIRS'
#           action: 'Create Or Update Resource Group'
#           templateLocation: 'Linked artifact'
#           csmFile: $(System.DefaultWorkingDirectory)/infrastructure/mybeercellar-api.json
#           deploymentMode: 'Incremental'
    
#   - job: Build
#     displayName: Build
#     pool: $(pool)
#     steps:
#     - script: dotnet build --configuration $(buildConfiguration)
#       displayName: 'dotnet build $(buildConfiguration)'

#     - task: DotNetCoreCLI@2
#       displayName: 'dotnet publish'
#       inputs:
#         command: publish
#         publishWebProjects: True
#         arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#         zipAfterPublish: True

#     - task: PublishPipelineArtifact@1
#       displayName: 'Publish artifact'
#       inputs:
#         targetPath: '$(Build.ArtifactStagingDirectory)'
#         artifact: '$(artifact)'
#         publishLocation: 'pipeline'

# - stage: Release
#   displayName: Release stage
#   jobs:
#   - job:
#     displayName: Release
#     pool: $(pool)
#     steps:  
#     - task: DownloadPipelineArtifact@2
#       displayName: 'Download artifact'
#       inputs:
#         buildType: 'current'
#         artifactName: '$(artifact)'
#         targetPath: '$(System.DefaultWorkingDirectory)'

#     - task: AzureRmWebAppDeployment@4
#       inputs:
#         ConnectionType: 'AzureRM'
#         azureSubscription: 'AIRS'
#         appType: 'webApp'
#         WebAppName: 'secdeploy'
#         packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'